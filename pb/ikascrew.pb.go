// Code generated by protoc-gen-go.
// source: ikascrew.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	ikascrew.proto

It has these top-level messages:
	SyncRequest
	SyncReply
	EffectRequest
	EffectReply
	SwitchRequest
	SwitchReply
	VolumeMessage
	VolumeReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SyncRequest struct {
}

func (m *SyncRequest) Reset()                    { *m = SyncRequest{} }
func (m *SyncRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()               {}
func (*SyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SyncReply struct {
	Source  string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Project string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (m *SyncReply) Reset()                    { *m = SyncReply{} }
func (m *SyncReply) String() string            { return proto.CompactTextString(m) }
func (*SyncReply) ProtoMessage()               {}
func (*SyncReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SyncReply) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SyncReply) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SyncReply) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type EffectRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Effect string `protobuf:"bytes,3,opt,name=effect" json:"effect,omitempty"`
}

func (m *EffectRequest) Reset()                    { *m = EffectRequest{} }
func (m *EffectRequest) String() string            { return proto.CompactTextString(m) }
func (*EffectRequest) ProtoMessage()               {}
func (*EffectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EffectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EffectRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EffectRequest) GetEffect() string {
	if m != nil {
		return m.Effect
	}
	return ""
}

type EffectReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *EffectReply) Reset()                    { *m = EffectReply{} }
func (m *EffectReply) String() string            { return proto.CompactTextString(m) }
func (*EffectReply) ProtoMessage()               {}
func (*EffectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EffectReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SwitchRequest struct {
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *SwitchRequest) Reset()                    { *m = SwitchRequest{} }
func (m *SwitchRequest) String() string            { return proto.CompactTextString(m) }
func (*SwitchRequest) ProtoMessage()               {}
func (*SwitchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SwitchRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type SwitchReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *SwitchReply) Reset()                    { *m = SwitchReply{} }
func (m *SwitchReply) String() string            { return proto.CompactTextString(m) }
func (*SwitchReply) ProtoMessage()               {}
func (*SwitchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SwitchReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type VolumeMessage struct {
	Index int64   `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *VolumeMessage) Reset()                    { *m = VolumeMessage{} }
func (m *VolumeMessage) String() string            { return proto.CompactTextString(m) }
func (*VolumeMessage) ProtoMessage()               {}
func (*VolumeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VolumeMessage) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *VolumeMessage) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type VolumeReply struct {
	Success   bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ValueList []float64 `protobuf:"fixed64,2,rep,packed,name=valueList" json:"valueList,omitempty"`
}

func (m *VolumeReply) Reset()                    { *m = VolumeReply{} }
func (m *VolumeReply) String() string            { return proto.CompactTextString(m) }
func (*VolumeReply) ProtoMessage()               {}
func (*VolumeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VolumeReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *VolumeReply) GetValueList() []float64 {
	if m != nil {
		return m.ValueList
	}
	return nil
}

func init() {
	proto.RegisterType((*SyncRequest)(nil), "pb.SyncRequest")
	proto.RegisterType((*SyncReply)(nil), "pb.SyncReply")
	proto.RegisterType((*EffectRequest)(nil), "pb.EffectRequest")
	proto.RegisterType((*EffectReply)(nil), "pb.EffectReply")
	proto.RegisterType((*SwitchRequest)(nil), "pb.SwitchRequest")
	proto.RegisterType((*SwitchReply)(nil), "pb.SwitchReply")
	proto.RegisterType((*VolumeMessage)(nil), "pb.VolumeMessage")
	proto.RegisterType((*VolumeReply)(nil), "pb.VolumeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ikascrew service

type IkascrewClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error)
	Switch(ctx context.Context, in *SwitchRequest, opts ...grpc.CallOption) (*SwitchReply, error)
	PutVolume(ctx context.Context, in *VolumeMessage, opts ...grpc.CallOption) (*VolumeReply, error)
}

type ikascrewClient struct {
	cc *grpc.ClientConn
}

func NewIkascrewClient(cc *grpc.ClientConn) IkascrewClient {
	return &ikascrewClient{cc}
}

func (c *ikascrewClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := grpc.Invoke(ctx, "/pb.Ikascrew/Sync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikascrewClient) Switch(ctx context.Context, in *SwitchRequest, opts ...grpc.CallOption) (*SwitchReply, error) {
	out := new(SwitchReply)
	err := grpc.Invoke(ctx, "/pb.Ikascrew/Switch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikascrewClient) PutVolume(ctx context.Context, in *VolumeMessage, opts ...grpc.CallOption) (*VolumeReply, error) {
	out := new(VolumeReply)
	err := grpc.Invoke(ctx, "/pb.Ikascrew/PutVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ikascrew service

type IkascrewServer interface {
	Sync(context.Context, *SyncRequest) (*SyncReply, error)
	Switch(context.Context, *SwitchRequest) (*SwitchReply, error)
	PutVolume(context.Context, *VolumeMessage) (*VolumeReply, error)
}

func RegisterIkascrewServer(s *grpc.Server, srv IkascrewServer) {
	s.RegisterService(&_Ikascrew_serviceDesc, srv)
}

func _Ikascrew_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkascrewServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Ikascrew/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkascrewServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ikascrew_Switch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkascrewServer).Switch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Ikascrew/Switch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkascrewServer).Switch(ctx, req.(*SwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ikascrew_PutVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkascrewServer).PutVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Ikascrew/PutVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkascrewServer).PutVolume(ctx, req.(*VolumeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ikascrew_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Ikascrew",
	HandlerType: (*IkascrewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Ikascrew_Sync_Handler,
		},
		{
			MethodName: "Switch",
			Handler:    _Ikascrew_Switch_Handler,
		},
		{
			MethodName: "PutVolume",
			Handler:    _Ikascrew_PutVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ikascrew.proto",
}

func init() { proto.RegisterFile("ikascrew.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x4e, 0xeb, 0x30,
	0x10, 0x6c, 0xda, 0xbe, 0xb4, 0xd9, 0x2a, 0xaf, 0xc2, 0x42, 0x95, 0x55, 0x71, 0xa8, 0xcc, 0x81,
	0x9e, 0x22, 0x01, 0x47, 0xce, 0x3d, 0x20, 0x81, 0x00, 0x57, 0xe2, 0x9e, 0x98, 0x2d, 0x04, 0xd2,
	0xc4, 0xc4, 0x36, 0x25, 0x5f, 0xc2, 0xef, 0xa2, 0xd8, 0x89, 0x1a, 0x10, 0x82, 0xdb, 0xce, 0x64,
	0x67, 0x66, 0x37, 0x6b, 0xf8, 0x9f, 0xbe, 0xc4, 0x4a, 0x94, 0xb8, 0x8b, 0x64, 0x59, 0xe8, 0x82,
	0xf4, 0x65, 0xc2, 0x42, 0x98, 0xac, 0xab, 0x5c, 0x70, 0x7c, 0x35, 0xa8, 0x34, 0xbb, 0x83, 0xc0,
	0x41, 0x99, 0x55, 0x64, 0x06, 0xbe, 0x2a, 0x4c, 0x29, 0x90, 0x7a, 0x0b, 0x6f, 0x19, 0xf0, 0x06,
	0x11, 0x02, 0x43, 0x5d, 0x49, 0xa4, 0x7d, 0xcb, 0xda, 0x9a, 0x50, 0x18, 0xc9, 0xb2, 0x78, 0x46,
	0xa1, 0xe9, 0xc0, 0xd2, 0x2d, 0x64, 0x37, 0x10, 0xae, 0x36, 0x1b, 0x14, 0xba, 0xc9, 0xa8, 0xe5,
	0x79, 0xbc, 0x6d, 0x4d, 0x6d, 0xfd, 0xa3, 0xe5, 0x0c, 0x7c, 0xb4, 0xc2, 0xc6, 0xb1, 0x41, 0xec,
	0x04, 0x26, 0xad, 0x61, 0x3d, 0x25, 0x85, 0x91, 0x32, 0x42, 0xa0, 0x52, 0xd6, 0x71, 0xcc, 0x5b,
	0xc8, 0x8e, 0x21, 0x5c, 0xef, 0x52, 0x2d, 0x9e, 0x3a, 0xc9, 0xdf, 0x53, 0x6a, 0xb7, 0xb6, 0xe9,
	0x77, 0xb7, 0x0b, 0x08, 0xef, 0x8b, 0xcc, 0x6c, 0xf1, 0x1a, 0x95, 0x8a, 0x1f, 0x91, 0x1c, 0xc2,
	0xbf, 0x34, 0x7f, 0xc0, 0x77, 0xdb, 0x38, 0xe0, 0x0e, 0xd4, 0xec, 0x5b, 0x9c, 0x19, 0x17, 0xe2,
	0x71, 0x07, 0xd8, 0x0a, 0x26, 0x4e, 0xfc, 0x47, 0x0a, 0x39, 0x82, 0xc0, 0x2a, 0xae, 0x52, 0xa5,
	0x69, 0x7f, 0x31, 0x58, 0x7a, 0x7c, 0x4f, 0x9c, 0x7d, 0x78, 0x30, 0xbe, 0x6c, 0x8e, 0x48, 0x96,
	0x30, 0xac, 0x6f, 0x45, 0xa6, 0x91, 0x4c, 0xa2, 0xce, 0x11, 0xe7, 0xe1, 0x9e, 0x90, 0x59, 0xc5,
	0x7a, 0x24, 0x02, 0xdf, 0xed, 0x48, 0x0e, 0xec, 0xa7, 0xee, 0x4f, 0x99, 0x4f, 0xbb, 0x94, 0xeb,
	0x3f, 0x85, 0xe0, 0xd6, 0x68, 0x37, 0xb0, 0x93, 0x7c, 0xd9, 0xdc, 0x49, 0x3a, 0xfb, 0xb0, 0x5e,
	0xe2, 0xdb, 0x27, 0x75, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xd6, 0x75, 0x40, 0x64, 0x02,
	0x00, 0x00,
}
